(function() {var implementors = {};
implementors["aho_corasick"] = [{"text":"impl Error for Error","synthetic":false,"types":[]}];
implementors["arrayvec"] = [{"text":"impl&lt;T:&nbsp;Any&gt; Error for CapacityError&lt;T&gt;","synthetic":false,"types":[]}];
implementors["base64"] = [{"text":"impl Error for DecodeError","synthetic":false,"types":[]}];
implementors["chrono"] = [{"text":"impl Error for ParseError","synthetic":false,"types":[]},{"text":"impl Error for RoundingError","synthetic":false,"types":[]}];
implementors["clap"] = [{"text":"impl Error for Error","synthetic":false,"types":[]}];
implementors["config"] = [{"text":"impl Error for ConfigError","synthetic":false,"types":[]}];
implementors["cookie"] = [{"text":"impl Error for ParseError","synthetic":false,"types":[]}];
implementors["cookie_store"] = [{"text":"impl Error for Error","synthetic":false,"types":[]}];
implementors["either"] = [{"text":"impl&lt;L, R&gt; Error for Either&lt;L, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;L: Error,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Error,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["err_context"] = [{"text":"impl&lt;M:&nbsp;Debug + Display, E:&nbsp;Error + 'static&gt; Error for Context&lt;M, E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;M:&nbsp;Debug + Display&gt; Error for BoxContext&lt;M, dyn Error + Send + Sync&gt;","synthetic":false,"types":[]},{"text":"impl&lt;M:&nbsp;Debug + Display&gt; Error for BoxContext&lt;M, dyn Error + Send&gt;","synthetic":false,"types":[]},{"text":"impl&lt;M:&nbsp;Debug + Display&gt; Error for BoxContext&lt;M, dyn Error + Sync&gt;","synthetic":false,"types":[]},{"text":"impl&lt;M:&nbsp;Debug + Display&gt; Error for BoxContext&lt;M, dyn Error&gt;","synthetic":false,"types":[]}];
implementors["failure"] = [{"text":"impl&lt;E:&nbsp;Display + Debug&gt; Error for Compat&lt;E&gt;","synthetic":false,"types":[]}];
implementors["fern"] = [{"text":"impl Error for InitError","synthetic":false,"types":[]}];
implementors["flate2"] = [{"text":"impl Error for DecompressError","synthetic":false,"types":[]},{"text":"impl Error for CompressError","synthetic":false,"types":[]}];
implementors["futures"] = [{"text":"impl&lt;E&gt; Error for SharedError&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Error,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Any&gt; Error for ReuniteError&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Error for Canceled","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Any&gt; Error for SendError&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Any&gt; Error for TrySendError&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Any&gt; Error for SendError&lt;T&gt;","synthetic":false,"types":[]}];
implementors["futures_channel"] = [{"text":"impl Error for SendError","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Any&gt; Error for TrySendError&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Error for TryRecvError","synthetic":false,"types":[]},{"text":"impl Error for Canceled","synthetic":false,"types":[]}];
implementors["h2"] = [{"text":"impl Error for Error","synthetic":false,"types":[]}];
implementors["http"] = [{"text":"impl Error for InvalidHeaderName","synthetic":false,"types":[]},{"text":"impl Error for InvalidHeaderNameBytes","synthetic":false,"types":[]},{"text":"impl Error for InvalidHeaderValue","synthetic":false,"types":[]},{"text":"impl Error for InvalidHeaderValueBytes","synthetic":false,"types":[]},{"text":"impl Error for ToStrError","synthetic":false,"types":[]},{"text":"impl Error for InvalidMethod","synthetic":false,"types":[]},{"text":"impl Error for InvalidStatusCode","synthetic":false,"types":[]},{"text":"impl Error for InvalidUri","synthetic":false,"types":[]},{"text":"impl Error for InvalidUriBytes","synthetic":false,"types":[]},{"text":"impl Error for InvalidUriParts","synthetic":false,"types":[]},{"text":"impl Error for Error","synthetic":false,"types":[]}];
implementors["httparse"] = [{"text":"impl Error for Error","synthetic":false,"types":[]}];
implementors["httpdate"] = [{"text":"impl Error for Error","synthetic":false,"types":[]}];
implementors["humantime"] = [{"text":"impl Error for Error","synthetic":false,"types":[]},{"text":"impl Error for Error","synthetic":false,"types":[]}];
implementors["hyper"] = [{"text":"impl Error for InvalidNameError","synthetic":false,"types":[]},{"text":"impl Error for Error","synthetic":false,"types":[]}];
implementors["ipnet"] = [{"text":"impl Error for PrefixLenError","synthetic":false,"types":[]},{"text":"impl Error for AddrParseError","synthetic":false,"types":[]}];
implementors["log"] = [{"text":"impl Error for SetLoggerError","synthetic":false,"types":[]},{"text":"impl Error for ParseLevelError","synthetic":false,"types":[]}];
implementors["mime"] = [{"text":"impl Error for FromStrError","synthetic":false,"types":[]}];
implementors["minreq"] = [{"text":"impl Error for Error","synthetic":false,"types":[]}];
implementors["native_tls"] = [{"text":"impl Error for Error","synthetic":false,"types":[]},{"text":"impl&lt;S&gt; Error for HandshakeError&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Any + Debug,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["nix"] = [{"text":"impl Error for Errno","synthetic":false,"types":[]},{"text":"impl Error for Error","synthetic":false,"types":[]}];
implementors["nom"] = [{"text":"impl&lt;E&gt; Error for Err&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Debug,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["openssl"] = [{"text":"impl Error for ErrorStack","synthetic":false,"types":[]},{"text":"impl Error for Error","synthetic":false,"types":[]},{"text":"impl Error for Error","synthetic":false,"types":[]},{"text":"impl&lt;S:&nbsp;Debug&gt; Error for HandshakeError&lt;S&gt;","synthetic":false,"types":[]},{"text":"impl Error for X509VerifyResult","synthetic":false,"types":[]}];
implementors["privdrop"] = [{"text":"impl Error for PrivDropError","synthetic":false,"types":[]}];
implementors["proc_macro2"] = [{"text":"impl Error for LexError","synthetic":false,"types":[]}];
implementors["publicsuffix"] = [{"text":"impl Error for Error","synthetic":false,"types":[]}];
implementors["rand"] = [{"text":"impl Error for WeightedError","synthetic":false,"types":[]}];
implementors["rand_core"] = [{"text":"impl Error for Error","synthetic":false,"types":[]}];
implementors["rand_jitter"] = [{"text":"impl Error for TimerError","synthetic":false,"types":[]}];
implementors["regex"] = [{"text":"impl Error for Error","synthetic":false,"types":[]}];
implementors["regex_syntax"] = [{"text":"impl Error for Error","synthetic":false,"types":[]},{"text":"impl Error for Error","synthetic":false,"types":[]},{"text":"impl Error for Error","synthetic":false,"types":[]},{"text":"impl Error for CaseFoldError","synthetic":false,"types":[]},{"text":"impl Error for UnicodeWordError","synthetic":false,"types":[]}];
implementors["reqwest"] = [{"text":"impl Error for Error","synthetic":false,"types":[]}];
implementors["serde"] = [{"text":"impl Error for Error","synthetic":false,"types":[]}];
implementors["serde_json"] = [{"text":"impl Error for Error","synthetic":false,"types":[]}];
implementors["serde_path_to_error"] = [{"text":"impl&lt;E:&nbsp;StdError + 'static&gt; Error for Error&lt;E&gt;","synthetic":false,"types":[]}];
implementors["serde_urlencoded"] = [{"text":"impl Error for Error","synthetic":false,"types":[]}];
implementors["serde_yaml"] = [{"text":"impl Error for Error","synthetic":false,"types":[]}];
implementors["spirit"] = [{"text":"impl Error for InvalidFileType","synthetic":false,"types":[]},{"text":"impl Error for MissingFile","synthetic":false,"types":[]},{"text":"impl Error for MultiError","synthetic":false,"types":[]},{"text":"impl Error for MissingEquals","synthetic":false,"types":[]}];
implementors["syn"] = [{"text":"impl Error for Error","synthetic":false,"types":[]}];
implementors["time"] = [{"text":"impl Error for OutOfRangeError","synthetic":false,"types":[]},{"text":"impl Error for ParseError","synthetic":false,"types":[]}];
implementors["tokio"] = [{"text":"impl Error for FrameTooBig","synthetic":false,"types":[]}];
implementors["tokio_buf"] = [{"text":"impl Error for CollectVecError","synthetic":false,"types":[]},{"text":"impl Error for CollectBytesError","synthetic":false,"types":[]}];
implementors["tokio_current_thread"] = [{"text":"impl Error for RunError","synthetic":false,"types":[]},{"text":"impl Error for RunTimeoutError","synthetic":false,"types":[]},{"text":"impl Error for TurnError","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Debug&gt; Error for BlockError&lt;T&gt;","synthetic":false,"types":[]}];
implementors["tokio_executor"] = [{"text":"impl Error for EnterError","synthetic":false,"types":[]},{"text":"impl Error for SpawnError","synthetic":false,"types":[]}];
implementors["tokio_reactor"] = [{"text":"impl Error for SetFallbackError","synthetic":false,"types":[]}];
implementors["tokio_sync"] = [{"text":"impl Error for SendError","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Debug&gt; Error for TrySendError&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Error for RecvError","synthetic":false,"types":[]},{"text":"impl Error for UnboundedSendError","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Debug&gt; Error for UnboundedTrySendError&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Error for UnboundedRecvError","synthetic":false,"types":[]},{"text":"impl Error for RecvError","synthetic":false,"types":[]},{"text":"impl Error for TryRecvError","synthetic":false,"types":[]},{"text":"impl Error for AcquireError","synthetic":false,"types":[]},{"text":"impl Error for TryAcquireError","synthetic":false,"types":[]},{"text":"impl Error for RecvError","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Debug&gt; Error for SendError&lt;T&gt;","synthetic":false,"types":[]}];
implementors["tokio_threadpool"] = [{"text":"impl Error for BlockingError","synthetic":false,"types":[]},{"text":"impl Error for ParkError","synthetic":false,"types":[]}];
implementors["tokio_timer"] = [{"text":"impl&lt;T:&nbsp;StdError + 'static&gt; Error for ThrottleError&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Error&gt; Error for Error&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Error for Error","synthetic":false,"types":[]}];
implementors["tokio_util"] = [{"text":"impl Error for LengthDelimitedCodecError","synthetic":false,"types":[]},{"text":"impl Error for LinesCodecError","synthetic":false,"types":[]}];
implementors["toml"] = [{"text":"impl Error for Error","synthetic":false,"types":[]},{"text":"impl Error for Error","synthetic":false,"types":[]}];
implementors["tracing_core"] = [{"text":"impl Error for SetGlobalDefaultError","synthetic":false,"types":[]},{"text":"impl Error for ParseLevelError","synthetic":false,"types":[]},{"text":"impl Error for ParseLevelFilterError","synthetic":false,"types":[]}];
implementors["try_from"] = [{"text":"impl Error for TryFromIntToCharError","synthetic":false,"types":[]},{"text":"impl Error for TryFromIntError","synthetic":false,"types":[]}];
implementors["url"] = [{"text":"impl Error for ParseError","synthetic":false,"types":[]}];
implementors["uuid"] = [{"text":"impl Error for ParseError","synthetic":false,"types":[]},{"text":"impl Error for BytesError","synthetic":false,"types":[]},{"text":"impl Error for Error","synthetic":false,"types":[]}];
implementors["void"] = [{"text":"impl Error for Void","synthetic":false,"types":[]}];
implementors["yaml_rust"] = [{"text":"impl Error for EmitError","synthetic":false,"types":[]},{"text":"impl Error for ScanError","synthetic":false,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()